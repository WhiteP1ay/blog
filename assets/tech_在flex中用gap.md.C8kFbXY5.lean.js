import{_ as e,c as p,a0 as t,o as r}from"./chunks/framework.Dsvon-85.js";const g="/blog/assets/image-20240822173339977.D0eVHZtZ.png",m=JSON.parse('{"title":"在 flex 中用 gap","description":"","frontmatter":{},"headers":[],"relativePath":"tech/在flex中用gap.md","filePath":"tech/在flex中用gap.md"}'),n={name:"tech/在flex中用gap.md"};function o(s,a,l,i,f,x){return r(),p("div",null,a[0]||(a[0]=[t('<h1 id="在-flex-中用-gap" tabindex="-1">在 flex 中用 gap <a class="header-anchor" href="#在-flex-中用-gap" aria-label="Permalink to &quot;在 flex 中用 gap&quot;">​</a></h1><p>在容器中排列若干子项,通常我们会用 flex 布局配合子项的 margin 来让子项有间距的排列在容器内.</p><p><strong>缺点</strong>：</p><p>每一行的最后一项和最后一行有多余的 margin 冗余。</p><p><strong>解决方法：</strong></p><p>在给容器设定 padding 的时候减掉这个多余的 margin ,或者比较 hack 的给外部容器一点负 margin.</p><p><strong>flex-gap:</strong></p><p>但其实在 flex 布局内可以用 gap,来轻松指定内部项的排列,不再需要手动给 margin.</p><p>在 tailwind 里可以很直观的使用 gap-x-[10px] gap-y-[10px] 来简单,优雅的给子项设定间距.</p><p><strong>兼容性：</strong></p><p>有趣的是,我们习惯用 flex 而不用 grid 布局的原因是 flex 兼容性更好.</p><p>但 gap 属性在 grid 布局中的兼容性比在 flex 布局中的兼容性要好.</p><img src="'+g+'" alt="image-20240822173339977" style="zoom:33%;"><p><strong>后记:</strong></p><p>最近为了兼容老设备,不得不把组件库中的 flex 布局中的 gap 手动改为 margin 😭</p>',15)]))}const d=e(n,[["render",o]]);export{m as __pageData,d as default};
