import{_ as e,c as l,a0 as s,o as n}from"./chunks/framework.Dsvon-85.js";const h=JSON.parse('{"title":"记浏览器不打印console.log","description":"","frontmatter":{},"headers":[],"relativePath":"tech/记浏览器不打印console.log.md","filePath":"tech/记浏览器不打印console.log.md"}'),a={name:"tech/记浏览器不打印console.log.md"};function t(p,o,c,i,r,g){return n(),l("div",null,o[0]||(o[0]=[s(`<h1 id="记浏览器不打印console-log" tabindex="-1">记浏览器不打印console.log <a class="header-anchor" href="#记浏览器不打印console-log" aria-label="Permalink to &quot;记浏览器不打印console.log&quot;">​</a></h1><p>**问题描述: **</p><p>在项目里写的console.log都不能在浏览器控制台里看到对应输出.</p><p><strong>排查过程</strong></p><ol><li><p>第一反应是浏览器的插件可能有问题,先禁用了所有插件</p></li><li><p>然后排查是不是webpack的配置项有问题,比如在是否在开发环境错误的压缩代码导致console.log被删除</p></li><li><p>前两部都没排查出问题, 且只有该项目存在无法打印的问题,懵了一会,决定查看console.log是否被劫持改写</p></li><li><p>在控制台直接敲</p><div class="language-jsconsole.log vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsconsole.log</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>console.log</span></span>
<span class="line"><span>//输出: function(){}</span></span></code></pre></div><p>得知, console对象被劫持改写了,剩下的就是排查是哪改写了.</p></li></ol><p><strong>排查结果</strong></p><p>结果是index.html里,有一部分代码(直接写进html的脚本,非webpack注入代码)</p><p>使用第三方工具压缩混淆,混淆的过程中第三方工具为了防用户恶意debug,重写了console里的各个方法</p>`,8)]))}const _=e(a,[["render",t]]);export{h as __pageData,_ as default};
