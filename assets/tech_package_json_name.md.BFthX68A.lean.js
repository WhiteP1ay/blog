import{_ as a,c as t,a0 as o,o as n}from"./chunks/framework.Dsvon-85.js";const g=JSON.parse('{"title":"name","description":"","frontmatter":{},"headers":[],"relativePath":"tech/package_json/name.md","filePath":"tech/package_json/name.md"}'),r={name:"tech/package_json/name.md"};function s(c,e,p,d,i,l){return n(),t("div",null,e[0]||(e[0]=[o('<h1 id="name" tabindex="-1">name <a class="header-anchor" href="#name" aria-label="Permalink to &quot;name&quot;">​</a></h1><p>项目的名称在 npm（Node Package Manager）上必须是唯一的。这意味着任何在 npm 注册表上发布的包都必须有一个独特的名称。</p><h3 id="命名规范" tabindex="-1">命名规范 <a class="header-anchor" href="#命名规范" aria-label="Permalink to &quot;命名规范&quot;">​</a></h3><p>**小写字母：**包名应该使用小写字母，不应包含大写字母。这有助于避免因大小写不一致而导致的问题，因为 npm 区分大小写。</p><p>**短横线分隔：**包名中可以使用短横线（-）进行单词分隔。这使得包名更易读，同时也符合 URL 命名规范。</p><p><strong>不包含特殊字符：</strong> 避免在包名中使用特殊字符，如空格、下划线等。只允许使用字母、数字和短横线。</p><h3 id="命名空间" tabindex="-1"><strong>命名空间</strong> <a class="header-anchor" href="#命名空间" aria-label="Permalink to &quot;**命名空间**&quot;">​</a></h3><p><strong>用户或组织：</strong> 包名的前缀可以是用户或组织的名称，以示包的所有权。这对于组织内部的项目或大型开源项目特别有用。例如，<strong><code>@babel/core</code></strong> 中的 <strong><code>@babel</code></strong> 就是一个命名空间，表示这个包是由 Babel 组织提供的核心包。</p><p><strong>范畴或用途：</strong> 包名的前缀也可以表示包所属的范畴或用途。这有助于将相关功能或领域的包组织在一起。例如，<strong><code>@types/node</code></strong> 中的 <strong><code>@types</code></strong> 表示这是 TypeScript 类型定义相关的包，而且与 Node.js 相关。</p>',9)]))}const h=a(r,[["render",s]]);export{g as __pageData,h as default};
